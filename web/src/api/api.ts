// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface Blog
 */
export interface Blog {
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  content: string;
  /**
   *
   * @type {number}
   * @memberof Blog
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof Blog
   */
  ownerId: number;
}
/**
 *
 * @export
 * @interface BlogCreate
 */
export interface BlogCreate {
  /**
   *
   * @type {string}
   * @memberof BlogCreate
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BlogCreate
   */
  content: string;
}
/**
 *
 * @export
 * @interface BodyLoginForAccessTokenTokenPost
 */
export interface BodyLoginForAccessTokenTokenPost {
  /**
   *
   * @type {string}
   * @memberof BodyLoginForAccessTokenTokenPost
   */
  grantType?: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginForAccessTokenTokenPost
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginForAccessTokenTokenPost
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginForAccessTokenTokenPost
   */
  scope?: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginForAccessTokenTokenPost
   */
  clientId?: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginForAccessTokenTokenPost
   */
  clientSecret?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface Token
 */
export interface Token {
  /**
   *
   * @type {string}
   * @memberof Token
   */
  access_token: string;
  /**
   *
   * @type {string}
   * @memberof Token
   */
  token_type: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number;
  /**
   *
   * @type {Array<Blog>}
   * @memberof User
   */
  blogs: Array<Blog>;
}
/**
 *
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  password: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<string>}
   * @memberof ValidationError
   */
  loc: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}
/**
 *
 * @export
 * @interface VerifyToken
 */
export interface VerifyToken {
  /**
   *
   * @type {string}
   * @memberof VerifyToken
   */
  access_token: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Blog
     * @param {BlogCreate} blogCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlogBlogsPost(
      blogCreate: BlogCreate,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'blogCreate' is not null or undefined
      if (blogCreate === null || blogCreate === undefined) {
        throw new RequiredError(
          'blogCreate',
          'Required parameter blogCreate was null or undefined when calling createBlogBlogsPost.'
        );
      }
      const localVarPath = `/blogs/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('OAuth2PasswordBearer', [])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };
      const needsSerialization =
        <any>'BlogCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(blogCreate !== undefined ? blogCreate : {})
        : blogCreate || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserUsersPost(
      userCreate: UserCreate,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'userCreate' is not null or undefined
      if (userCreate === null || userCreate === undefined) {
        throw new RequiredError(
          'userCreate',
          'Required parameter userCreate was null or undefined when calling createUserUsersPost.'
        );
      }
      const localVarPath = `/users/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };
      const needsSerialization =
        <any>'UserCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(userCreate !== undefined ? userCreate : {})
        : userCreate || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Blog
     * @param {number} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogBlogsBlogIdDelete(
      blogId: number,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'blogId' is not null or undefined
      if (blogId === null || blogId === undefined) {
        throw new RequiredError(
          'blogId',
          'Required parameter blogId was null or undefined when calling deleteBlogBlogsBlogIdDelete.'
        );
      }
      const localVarPath = `/blogs/{blog_id}/`.replace(
        `{${'blog_id'}}`,
        encodeURIComponent(String(blogId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('OAuth2PasswordBearer', [])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Blog
     * @param {number} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogBlogsBlogIdGet(blogId: number, options: any = {}): RequestArgs {
      // verify required parameter 'blogId' is not null or undefined
      if (blogId === null || blogId === undefined) {
        throw new RequiredError(
          'blogId',
          'Required parameter blogId was null or undefined when calling getBlogBlogsBlogIdGet.'
        );
      }
      const localVarPath = `/blogs/{blog_id}/`.replace(
        `{${'blog_id'}}`,
        encodeURIComponent(String(blogId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Blogs
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBlogsBlogsGet(
      skip?: number,
      limit?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/blogs/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Users
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersUsersGet(
      skip?: number,
      limit?: number,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/users/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Login For Access Token
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginForAccessTokenTokenPost(
      username: string,
      password: string,
      grantType?: string,
      scope?: string,
      clientId?: string,
      clientSecret?: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'username' is not null or undefined
      if (username === null || username === undefined) {
        throw new RequiredError(
          'username',
          'Required parameter username was null or undefined when calling loginForAccessTokenTokenPost.'
        );
      }
      // verify required parameter 'password' is not null or undefined
      if (password === null || password === undefined) {
        throw new RequiredError(
          'password',
          'Required parameter password was null or undefined when calling loginForAccessTokenTokenPost.'
        );
      }
      const localVarPath = `/token`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType as any);
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username as any);
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set('scope', scope as any);
      }

      if (clientId !== undefined) {
        localVarFormParams.set('client_id', clientId as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set('client_secret', clientSecret as any);
      }

      localVarHeaderParameter['Content-Type'] =
        'application/x-www-form-urlencoded';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUsersMeUsersMeGet(options: any = {}): RequestArgs {
      const localVarPath = `/users/me/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('OAuth2PasswordBearer', [])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Verify Access Token
     * @param {VerifyToken} verifyToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAccessTokenTokenVerifyPost(
      verifyToken: VerifyToken,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'verifyToken' is not null or undefined
      if (verifyToken === null || verifyToken === undefined) {
        throw new RequiredError(
          'verifyToken',
          'Required parameter verifyToken was null or undefined when calling verifyAccessTokenTokenVerifyPost.'
        );
      }
      const localVarPath = `/token/verify`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };
      const needsSerialization =
        <any>'VerifyToken' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(verifyToken !== undefined ? verifyToken : {})
        : verifyToken || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Blog
     * @param {BlogCreate} blogCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlogBlogsPost(
      blogCreate: BlogCreate,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Blog> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).createBlogBlogsPost(blogCreate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserUsersPost(
      userCreate: UserCreate,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).createUserUsersPost(userCreate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete Blog
     * @param {number} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogBlogsBlogIdDelete(
      blogId: number,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).deleteBlogBlogsBlogIdDelete(blogId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get Blog
     * @param {number} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogBlogsBlogIdGet(
      blogId: number,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Blog> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).getBlogBlogsBlogIdGet(blogId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary List Blogs
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBlogsBlogsGet(
      skip?: number,
      limit?: number,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Blog>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).listBlogsBlogsGet(skip, limit, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary List Users
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersUsersGet(
      skip?: number,
      limit?: number,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).listUsersUsersGet(skip, limit, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Login For Access Token
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginForAccessTokenTokenPost(
      username: string,
      password: string,
      grantType?: string,
      scope?: string,
      clientId?: string,
      clientSecret?: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).loginForAccessTokenTokenPost(
        username,
        password,
        grantType,
        scope,
        clientId,
        clientSecret,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUsersMeUsersMeGet(
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).readUsersMeUsersMeGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Verify Access Token
     * @param {VerifyToken} verifyToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAccessTokenTokenVerifyPost(
      verifyToken: VerifyToken,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).verifyAccessTokenTokenVerifyPost(verifyToken, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Blog
     * @param {BlogCreate} blogCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlogBlogsPost(blogCreate: BlogCreate, options?: any) {
      return DefaultApiFp(configuration).createBlogBlogsPost(
        blogCreate,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserUsersPost(userCreate: UserCreate, options?: any) {
      return DefaultApiFp(configuration).createUserUsersPost(
        userCreate,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary Delete Blog
     * @param {number} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogBlogsBlogIdDelete(blogId: number, options?: any) {
      return DefaultApiFp(configuration).deleteBlogBlogsBlogIdDelete(
        blogId,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary Get Blog
     * @param {number} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogBlogsBlogIdGet(blogId: number, options?: any) {
      return DefaultApiFp(configuration).getBlogBlogsBlogIdGet(blogId, options)(
        axios,
        basePath
      );
    },
    /**
     *
     * @summary List Blogs
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBlogsBlogsGet(skip?: number, limit?: number, options?: any) {
      return DefaultApiFp(configuration).listBlogsBlogsGet(
        skip,
        limit,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary List Users
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersUsersGet(skip?: number, limit?: number, options?: any) {
      return DefaultApiFp(configuration).listUsersUsersGet(
        skip,
        limit,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary Login For Access Token
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginForAccessTokenTokenPost(
      username: string,
      password: string,
      grantType?: string,
      scope?: string,
      clientId?: string,
      clientSecret?: string,
      options?: any
    ) {
      return DefaultApiFp(configuration).loginForAccessTokenTokenPost(
        username,
        password,
        grantType,
        scope,
        clientId,
        clientSecret,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUsersMeUsersMeGet(options?: any) {
      return DefaultApiFp(configuration).readUsersMeUsersMeGet(options)(
        axios,
        basePath
      );
    },
    /**
     *
     * @summary Verify Access Token
     * @param {VerifyToken} verifyToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAccessTokenTokenVerifyPost(verifyToken: VerifyToken, options?: any) {
      return DefaultApiFp(configuration).verifyAccessTokenTokenVerifyPost(
        verifyToken,
        options
      )(axios, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Create Blog
   * @param {BlogCreate} blogCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createBlogBlogsPost(blogCreate: BlogCreate, options?: any) {
    return DefaultApiFp(this.configuration).createBlogBlogsPost(
      blogCreate,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary Create User
   * @param {UserCreate} userCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createUserUsersPost(userCreate: UserCreate, options?: any) {
    return DefaultApiFp(this.configuration).createUserUsersPost(
      userCreate,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary Delete Blog
   * @param {number} blogId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteBlogBlogsBlogIdDelete(blogId: number, options?: any) {
    return DefaultApiFp(this.configuration).deleteBlogBlogsBlogIdDelete(
      blogId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary Get Blog
   * @param {number} blogId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getBlogBlogsBlogIdGet(blogId: number, options?: any) {
    return DefaultApiFp(this.configuration).getBlogBlogsBlogIdGet(
      blogId,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary List Blogs
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public listBlogsBlogsGet(skip?: number, limit?: number, options?: any) {
    return DefaultApiFp(this.configuration).listBlogsBlogsGet(
      skip,
      limit,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary List Users
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public listUsersUsersGet(skip?: number, limit?: number, options?: any) {
    return DefaultApiFp(this.configuration).listUsersUsersGet(
      skip,
      limit,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary Login For Access Token
   * @param {string} username
   * @param {string} password
   * @param {string} [grantType]
   * @param {string} [scope]
   * @param {string} [clientId]
   * @param {string} [clientSecret]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public loginForAccessTokenTokenPost(
    username: string,
    password: string,
    grantType?: string,
    scope?: string,
    clientId?: string,
    clientSecret?: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).loginForAccessTokenTokenPost(
      username,
      password,
      grantType,
      scope,
      clientId,
      clientSecret,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary Read Users Me
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public readUsersMeUsersMeGet(options?: any) {
    return DefaultApiFp(this.configuration).readUsersMeUsersMeGet(options)(
      this.axios,
      this.basePath
    );
  }

  /**
   *
   * @summary Verify Access Token
   * @param {VerifyToken} verifyToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public verifyAccessTokenTokenVerifyPost(
    verifyToken: VerifyToken,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).verifyAccessTokenTokenVerifyPost(
      verifyToken,
      options
    )(this.axios, this.basePath);
  }
}
