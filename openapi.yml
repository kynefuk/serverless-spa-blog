openapi: 3.0.2
info:
  title: FastAPI
  version: 0.1.0
servers:
  - url: http:localhost:7000
    description: dev server
paths:
  /blogs/:
    get:
      summary: List Blogs
      operationId: list_blogs_blogs__get
      parameters:
        - required: false
          schema:
            title: Skip
            type: integer
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            title: Limit
            type: integer
            default: 0
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response List Blogs Blogs  Get
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      summary: Create Blog
      operationId: create_blog_blogs__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCreate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/blogs/{blog_id}/':
    get:
      summary: Get Blog
      operationId: get_blog_blogs__blog_id___get
      parameters:
        - required: true
          schema:
            title: Blog Id
            type: integer
          name: blog_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      summary: Delete Blog
      operationId: delete_blog_blogs__blog_id___delete
      parameters:
        - required: true
          schema:
            title: Blog Id
            type: integer
          name: blog_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/blogs/{blog_id}':
    patch:
      summary: Edit Blog
      operationId: edit_blog_blogs__blog_id__patch
      parameters:
        - required: true
          schema:
            title: Blog Id
            type: integer
          name: blog_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCreate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /token/verify:
    post:
      summary: Verify Access Token
      operationId: verify_access_token_token_verify_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyToken'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /token:
    post:
      summary: Login For Access Token
      operationId: login_for_access_token_token_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_for_access_token_token_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /users/me/:
    get:
      summary: Read Users Me
      operationId: read_users_me_users_me__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - OAuth2PasswordBearer: []
  /users/:
    get:
      summary: List Users
      operationId: list_users_users__get
      parameters:
        - required: false
          schema:
            title: Skip
            type: integer
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            title: Limit
            type: integer
            default: 100
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response List Users Users  Get
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      summary: Create User
      operationId: create_user_users__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Blog:
      title: Blog
      required:
        - title
        - content
        - id
        - owner_id
      type: object
      properties:
        title:
          title: Title
          type: string
        content:
          title: Content
          type: string
        id:
          title: Id
          type: integer
        owner_id:
          title: Owner Id
          type: integer
    BlogCreate:
      title: BlogCreate
      required:
        - title
        - content
      type: object
      properties:
        title:
          title: Title
          type: string
        content:
          title: Content
          type: string
    Body_login_for_access_token_token_post:
      title: Body_login_for_access_token_token_post
      required:
        - username
        - password
      type: object
      properties:
        grant_type:
          title: Grant Type
          pattern: password
          type: string
        username:
          title: Username
          type: string
        password:
          title: Password
          type: string
        scope:
          title: Scope
          type: string
          default: ''
        client_id:
          title: Client Id
          type: string
        client_secret:
          title: Client Secret
          type: string
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    Token:
      title: Token
      required:
        - access_token
        - token_type
      type: object
      properties:
        access_token:
          title: Access Token
          type: string
        token_type:
          title: Token Type
          type: string
    User:
      title: User
      required:
        - name
        - email
        - id
        - blogs
      type: object
      properties:
        name:
          title: Name
          type: string
        email:
          title: Email
          type: string
        id:
          title: Id
          type: integer
        blogs:
          title: Blogs
          type: array
          items:
            $ref: '#/components/schemas/Blog'
    UserCreate:
      title: UserCreate
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          title: Name
          type: string
        email:
          title: Email
          type: string
        password:
          title: Password
          type: string
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
    VerifyToken:
      title: VerifyToken
      required:
        - access_token
      type: object
      properties:
        access_token:
          title: Access Token
          type: string
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: token
