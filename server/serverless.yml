service: server
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  stage: dev
  profile: serverless
  region: ap-northeast-1
  vpc:
    subnetIds:
      - !Ref SamplePublicSubnet1a
      - !Ref SamplePublicSubnet1c
    securityGroupIds:
      - !Ref SampleSGForLambda
  timeout: 300
  logRetentionInDays: 7

package:
  exclude:
    - .vscode
    - alembic
    - .devcontainer.json
    - .dockerignore
    - .flake8
    - .gitignore
    - alembic.ini
    - Dockerfile
    - Makefile
    - serverless.yml

functions:
  app:
    handler: apps.main.handler
    events:
      - http:
          path: /{path+}
          method: ANY
          private: false
          cors: true
    environment:
      MYSQL_DATABASE_URL: ${self:custom.envFile.SampleDBURL}
      SECRET_KEY: ${self:custom.envFile.SecretKey}
      CORS_ALLOWED_ORIGIN: ${self:custom.envFile.CORS_ALLOWED_ORIGIN}
      PROJECT_NAME: blogs
      DEBUG: False

custom:
  defaultStage: dev
  envFile: ${file(./.env.yml)}
  pythonRequirements:
    dockerizePip: false
    usePoetry: false
  customDomain:
    domainName: ${self:custom.envFile.CUSTOM_DOMAIN}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: ${self:custom.envFile.CUSTOM_DOMAIN}

resources:
  Resources:
    SampleVPC:
      Type: AWS::EC2::VPC
      DeletionPolicy: Delete
      Properties:
        CidrBlock: 10.0.0.0/16
        Tags:
          - Key: Name
            Value: SampleVPC

    SampleInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: SampleInternetGateway

    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: SampleVPC
        InternetGatewayId:
          Ref: SampleInternetGateway

    SampleElasticIp:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

    SamplePublicSubnet1a:
      DependsOn: [SampleVPC]
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: SampleVPC
        CidrBlock: 10.0.1.0/24
        Tags:
          - Key: Name
            Value: SamplePublicSubnet1a

    SamplePublicSubnet1c:
      DependsOn: [SampleVPC]
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: SampleVPC
        CidrBlock: 10.0.2.0/24
        Tags:
          - Key: Name
            Value: SamplePublicSubnet1c

    SamplePrivateSubnet1a:
      DependsOn: [SampleVPC]
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: SampleVPC
        AvailabilityZone: ap-northeast-1a
        CidrBlock: 10.0.3.0/24
        Tags:
          - Key: Name
            Value: SamplePrivateSubnet1a

    SamplePrivateSubnet1c:
      DependsOn: [SampleVPC]
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: SampleVPC
        AvailabilityZone: ap-northeast-1c
        CidrBlock: 10.0.4.0/24
        Tags:
          - Key: Name
            Value: SamplePrivateSubnet1c

    SamplePublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: SampleVPC
        Tags:
          - Key: Name
            Value: SamplePublicRouteTable

    SamplePublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: SamplePublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: SampleInternetGateway

    SubnetRouteTableAssociationPublicSubnet1a:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: SamplePublicSubnet1a
        RouteTableId:
          Ref: SamplePublicRouteTable

    SubnetRouteTableAssociationPublicSubnet1c:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: SamplePublicSubnet1c
        RouteTableId:
          Ref: SamplePublicRouteTable

    SampleApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      DeletionPolicy: Delete
      Properties:
        EndpointConfiguration:
          Types:
            - REGIONAL
        Name: SampleApiGatewayRestApi

    SampleSGForDB:
      DependsOn: SampleVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for DB
        GroupName: SampleSGForDB
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId:
              Ref: SampleSGForLambda
        VpcId:
          Ref: SampleVPC

    SampleSGForLambda:
      DependsOn: SampleVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Lambda
        GroupName: SampleSGForLambda
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        VpcId:
          Ref: SampleVPC

    SampleDBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: SampleDBSubnetGroup
        SubnetIds:
          - !Ref SamplePrivateSubnet1a
          - !Ref SamplePrivateSubnet1c

    SampleDBParameterGroup:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Sample Parameter Group for Aurora Serverless
        Family: aurora5.6
        Parameters:
          server_audit_logging: 0

    SampleDBCluster:
      DependsOn: SampleDBSubnetGroup
      Type: AWS::RDS::DBCluster
      Properties:
        DBClusterIdentifier: SampleDBCluster
        DatabaseName: blog
        DBSubnetGroupName:
          Ref: SampleDBSubnetGroup
        DBClusterParameterGroupName:
          Ref: SampleDBParameterGroup
        DeletionProtection: false
        Engine: aurora
        EngineMode: serverless
        EngineVersion: 5.6.10a
        StorageEncrypted: true
        EnableHttpEndpoint: true
        ScalingConfiguration:
          MinCapacity: 1
          AutoPause: true
          MaxCapacity: 2
          SecondsUntilAutoPause: 1800
        MasterUsername: ${self:custom.envFile.SampleMasterUsername}
        MasterUserPassword: ${self:custom.envFile.SampleMasterUserPassword}
        Port: 3306
        VpcSecurityGroupIds:
          - !Ref SampleSGForDB
plugins:
  - serverless-python-requirements
  - serverless-domain-manager
